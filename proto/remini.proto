syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.gravitalia.remini.remini";
option java_outer_classname = "ReminiProto";
option go_package = "./proto;proto";

package remini;

// Remini service definition used to perform requests.
service Remini {
    // Predicts whether image contains nudity or not.
    rpc Nudity (BytesRequest) returns (NudityReply) {}
    /// Predicts the probability of a text being toxic, neutral, obscene, etc.
    rpc Toxicity (StringRequest) returns (ToxicityReply) {}
}

// BytesRequest represents a query with only bytes on it.
message BytesRequest {
    // Data in bytes, used to perform image verfication.
    bytes bytes = 1;
}

// StringRequest represents a query with only string on it.
message StringRequest {
    // Data as string, used to perform text analyzing.
    string string = 1;
}

// NudityReply represents model prediction result with its confidence.
message NudityReply {
    // Nudity represents prediction result.
    enum Nudity {
        UNSPECIFIED = 0;
        NO_NUDITY = 1;
        NUDITY = 2;
    }

    Nudity result = 1;
    float confidence = 2;
}

// ToxicityReply represents model prediction about toxicity in a text.
// Multiple toxicities can be found on a single text.
message ToxicityReply {
    float identity_hate = 1;
    float insult = 2;
    // If the prediction of neutrality is highest,
    // this means that the text does not normally contain any toxicities.
    float neutral = 3;
    float obscene = 4;
    float severe_toxic = 5;
    float threat = 6;
    float toxic = 7;
}
