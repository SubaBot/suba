// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: proto/remini.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReminiClient is the client API for Remini service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReminiClient interface {
	// Predicts whether image contains nudity or not.
	Nudity(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*NudityReply, error)
	// / Predicts the probability of a text being toxic, neutral, obscene, etc.
	Toxicity(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*ToxicityReply, error)
}

type reminiClient struct {
	cc grpc.ClientConnInterface
}

func NewReminiClient(cc grpc.ClientConnInterface) ReminiClient {
	return &reminiClient{cc}
}

func (c *reminiClient) Nudity(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*NudityReply, error) {
	out := new(NudityReply)
	err := c.cc.Invoke(ctx, "/remini.Remini/Nudity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminiClient) Toxicity(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*ToxicityReply, error) {
	out := new(ToxicityReply)
	err := c.cc.Invoke(ctx, "/remini.Remini/Toxicity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReminiServer is the server API for Remini service.
// All implementations must embed UnimplementedReminiServer
// for forward compatibility
type ReminiServer interface {
	// Predicts whether image contains nudity or not.
	Nudity(context.Context, *BytesRequest) (*NudityReply, error)
	// / Predicts the probability of a text being toxic, neutral, obscene, etc.
	Toxicity(context.Context, *StringRequest) (*ToxicityReply, error)
	mustEmbedUnimplementedReminiServer()
}

// UnimplementedReminiServer must be embedded to have forward compatible implementations.
type UnimplementedReminiServer struct {
}

func (UnimplementedReminiServer) Nudity(context.Context, *BytesRequest) (*NudityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nudity not implemented")
}
func (UnimplementedReminiServer) Toxicity(context.Context, *StringRequest) (*ToxicityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Toxicity not implemented")
}
func (UnimplementedReminiServer) mustEmbedUnimplementedReminiServer() {}

// UnsafeReminiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReminiServer will
// result in compilation errors.
type UnsafeReminiServer interface {
	mustEmbedUnimplementedReminiServer()
}

func RegisterReminiServer(s grpc.ServiceRegistrar, srv ReminiServer) {
	s.RegisterService(&Remini_ServiceDesc, srv)
}

func _Remini_Nudity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminiServer).Nudity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remini.Remini/Nudity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminiServer).Nudity(ctx, req.(*BytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Remini_Toxicity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminiServer).Toxicity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remini.Remini/Toxicity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminiServer).Toxicity(ctx, req.(*StringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Remini_ServiceDesc is the grpc.ServiceDesc for Remini service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Remini_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "remini.Remini",
	HandlerType: (*ReminiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Nudity",
			Handler:    _Remini_Nudity_Handler,
		},
		{
			MethodName: "Toxicity",
			Handler:    _Remini_Toxicity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/remini.proto",
}
